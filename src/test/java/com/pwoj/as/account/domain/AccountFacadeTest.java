package com.pwoj.as.account.domain;

import com.pwoj.as.account.domain.command.CreateAccountCommand;
import com.pwoj.as.account.domain.exception.AccountExistsException;
import com.pwoj.as.account.domain.exception.UserTooYoungException;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.transaction.annotation.Transactional;

import java.math.BigDecimal;
import java.util.List;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.hasSize;
import static org.junit.jupiter.api.Assertions.assertThrows;

@SpringBootTest
@Transactional
class AccountFacadeTest {
    @Autowired
    private AccountFacade accountFacade;
    @Autowired
    private AccountRepository accountRepository;

    @Test
    void shouldCreateAccountAndSubAccounts() {
        accountFacade.createAccount(buildCreateAccountCommand("98112315725"));

        List<Account> accounts = accountRepository.findAll();
        assertThat(accounts, hasSize(1));
        assertThat(accounts.get(0).getSubAccounts(), hasSize(2));
    }

    @Test
    void shouldThrowExceptionWhenUserIsTooYoung() {
        String tooYoungPesel = "17210213746"; //should be generated by some library, because it would be outdated some day. Not included for task purpose
        CreateAccountCommand command = buildCreateAccountCommand(tooYoungPesel);

        assertThrows(UserTooYoungException.class, () -> accountFacade.createAccount(command));
    }

    @Test
    void shouldThrowExceptionWhenUserAlreadyHasAccount() {
        String pesel = "98112315725";
        accountRepository.save(Account.builder()
                .name("username")
                .surname("surname")
                .pesel(pesel)
                .build());
        CreateAccountCommand command = buildCreateAccountCommand(pesel);

        assertThrows(AccountExistsException.class, () -> accountFacade.createAccount(command));
    }


    private CreateAccountCommand buildCreateAccountCommand(String pesel) {
        return CreateAccountCommand.builder()
                .balance(new BigDecimal("122.22"))
                .name("username")
                .surname("surname")
                .pesel(pesel)
                .build();
    }
}